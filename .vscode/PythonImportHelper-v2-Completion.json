[
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "KafkaConsumer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaConsumer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaConsumer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaConsumer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller.wkafka",
        "description": "wkafka.controller.wkafka",
        "isExtraImport": true,
        "detail": "wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller.wkafka",
        "description": "wkafka.controller.wkafka",
        "isExtraImport": true,
        "detail": "wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "importPath": "wkafka.controller.wkafka",
        "description": "wkafka.controller.wkafka",
        "isExtraImport": true,
        "detail": "wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller",
        "description": "wkafka.controller",
        "isExtraImport": true,
        "detail": "wkafka.controller",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller",
        "description": "wkafka.controller",
        "isExtraImport": true,
        "detail": "wkafka.controller",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller",
        "description": "wkafka.controller",
        "isExtraImport": true,
        "detail": "wkafka.controller",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller",
        "description": "wkafka.controller",
        "isExtraImport": true,
        "detail": "wkafka.controller",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka.controller",
        "description": "wkafka.controller",
        "isExtraImport": true,
        "detail": "wkafka.controller",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka",
        "description": "wkafka",
        "isExtraImport": true,
        "detail": "wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka",
        "description": "wkafka",
        "isExtraImport": true,
        "detail": "wkafka",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "importPath": "wkafka",
        "description": "wkafka",
        "isExtraImport": true,
        "detail": "wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "importPath": "wkafka",
        "description": "wkafka",
        "isExtraImport": true,
        "detail": "wkafka",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "wpipe.pipe",
        "description": "wpipe.pipe",
        "isExtraImport": true,
        "detail": "wpipe.pipe",
        "documentation": {}
    },
    {
        "label": "escribir_yaml",
        "importPath": "wpipe.util",
        "description": "wpipe.util",
        "isExtraImport": true,
        "detail": "wpipe.util",
        "documentation": {}
    },
    {
        "label": "leer_yaml",
        "importPath": "wpipe.util",
        "description": "wpipe.util",
        "isExtraImport": true,
        "detail": "wpipe.util",
        "documentation": {}
    },
    {
        "label": "new_logger",
        "importPath": "wpipe.log",
        "description": "wpipe.log",
        "isExtraImport": true,
        "detail": "wpipe.log",
        "documentation": {}
    },
    {
        "label": "ProcessError",
        "importPath": "wpipe.exception",
        "description": "wpipe.exception",
        "isExtraImport": true,
        "detail": "wpipe.exception",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tomli_w",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tomli_w",
        "description": "tomli_w",
        "detail": "tomli_w",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "kind": 6,
        "importPath": "build.lib.wkafka.controller.wkafka",
        "description": "build.lib.wkafka.controller.wkafka",
        "peekOfCode": "class Consumer_data:\n    value: bytes = None\n    key: str = None\n    topic: str = None\n    group_id: str = None\n    header: str = None\n    offset: int = None\nclass Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach",
        "detail": "build.lib.wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "kind": 6,
        "importPath": "build.lib.wkafka.controller.wkafka",
        "description": "build.lib.wkafka.controller.wkafka",
        "peekOfCode": "class Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach\n    for easy message processing and sending.\n    \"\"\"\n    type_formats = [\"json\", \"file\", \"image\"]\n    is_producer = False\n    def __init__(\n        self,\n        server: str | list,",
        "detail": "build.lib.wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "process_message",
        "kind": 2,
        "importPath": "example.basic.consumer",
        "description": "example.basic.consumer",
        "peekOfCode": "def process_message(data):\n    header = data.header\n    value = data.value\n    key = data.key\n    print(f\"[send_to_docker] Message received: {value}, key: {key}, header: {header}\")\n# @kf.consumer(\n#     topic=\"sms\",\n#     group_id=f\"B{random.randint(1, 100)}\",\n#     key=\"csv\",\n# )",
        "detail": "example.basic.consumer",
        "documentation": {}
    },
    {
        "label": "kf",
        "kind": 5,
        "importPath": "example.basic.consumer",
        "description": "example.basic.consumer",
        "peekOfCode": "kf = Wkafka(server=\"localhost:9092\")\nkf = Wkafka(server=\"192.168.1.137:9092\")\n# @kf.consumer(\n#     topic=\"sms\",\n#     # group_id=f\"A{random.randint(1, 100)}\",\n#     # key=\"csv\",\n#     value_type=\"json\",\n#     other_config=dict(\n#         auto_offset_reset=\"earliest\",\n#         enable_auto_commit=False,",
        "detail": "example.basic.consumer",
        "documentation": {}
    },
    {
        "label": "kf",
        "kind": 5,
        "importPath": "example.basic.consumer",
        "description": "example.basic.consumer",
        "peekOfCode": "kf = Wkafka(server=\"192.168.1.137:9092\")\n# @kf.consumer(\n#     topic=\"sms\",\n#     # group_id=f\"A{random.randint(1, 100)}\",\n#     # key=\"csv\",\n#     value_type=\"json\",\n#     other_config=dict(\n#         auto_offset_reset=\"earliest\",\n#         enable_auto_commit=False,\n#     ),",
        "detail": "example.basic.consumer",
        "documentation": {}
    },
    {
        "label": "kf",
        "kind": 5,
        "importPath": "example.basic.producer",
        "description": "example.basic.producer",
        "peekOfCode": "kf = Wkafka(server=\"localhost:9092\")\n# Ejemplo de uso con 'with' y el método producer()\nwith kf.producer() as kf_producer:\n    # Enviar un mensaje\n    # kf_producer.send(topic=\"sms\", value={\"name\": \"John\"}, key=\"csv\", value_type=\"json\")\n    # kf_producer.send(topic=\"sms\", value={\"name\": \"Juan\"}, key=\"csv\", value_type=\"json\")\n    # kf_producer.send(topic=\"sms\", value=\"dog.jpg\", key=\"image\", value_type=\"file\")\n    image = cv2.imread(\"dog.jpg\")\n    kf_producer.send(\n        topic=\"sms\",",
        "detail": "example.basic.producer",
        "documentation": {}
    },
    {
        "label": "process_message",
        "kind": 2,
        "importPath": "example.basic.receive",
        "description": "example.basic.receive",
        "peekOfCode": "def process_message(data):\n    print(f\"Mensaje recibido: {data.value}, con clave: {data.key}\")\n@kafka_instance.consumer(topic=\"image\", value_convert_to=\"image\")\ndef stream_video(data):\n    DREAM = 600\n    im0 = data.value\n    cv2.imwrite(\"demo.jpg\", im0)\n    print(\n        f\"Message received 3: {data.value.shape}, key: {data.key}, headers: {data.header}\"\n    )",
        "detail": "example.basic.receive",
        "documentation": {}
    },
    {
        "label": "stream_video",
        "kind": 2,
        "importPath": "example.basic.receive",
        "description": "example.basic.receive",
        "peekOfCode": "def stream_video(data):\n    DREAM = 600\n    im0 = data.value\n    cv2.imwrite(\"demo.jpg\", im0)\n    print(\n        f\"Message received 3: {data.value.shape}, key: {data.key}, headers: {data.header}\"\n    )\n@kafka_instance.consumer(topic=\"video_topic\", value_convert_to=\"image\")\ndef stream_video(data):\n    DREAM_WIDTH = 600",
        "detail": "example.basic.receive",
        "documentation": {}
    },
    {
        "label": "stream_video",
        "kind": 2,
        "importPath": "example.basic.receive",
        "description": "example.basic.receive",
        "peekOfCode": "def stream_video(data):\n    DREAM_WIDTH = 600\n    im0 = data.value\n    header = data.header\n    frame_width = header.get(\"frame_width\")\n    frame_height = header.get(\"frame_height\")\n    new_size = DREAM_WIDTH / frame_width\n    im0 = cv2.resize(im0, (int(frame_width * new_size), int(frame_height * new_size)))\n    # Process each video frame as an image\n    cv2.imshow(\"Video Received\", im0)",
        "detail": "example.basic.receive",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.basic.receive",
        "description": "example.basic.receive",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.137:9092\", name=\"video_show\")\n@kafka_instance.consumer(\n    topic=\"mi_tema\",\n    value_convert_to=\"json\",\n)\ndef process_message(data):\n    print(f\"Mensaje recibido: {data.value}, con clave: {data.key}\")\n@kafka_instance.consumer(topic=\"image\", value_convert_to=\"image\")\ndef stream_video(data):\n    DREAM = 600",
        "detail": "example.basic.receive",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.basic.send_image",
        "description": "example.basic.send_image",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.60:9092\")\nwith kafka_instance.producer() as kf_producer:\n    # Enviar un mensaje\n    # kf_producer.send(topic=\"sms\", value={\"name\": \"John\"}, key=\"csv\", value_type=\"json\")\n    # kf_producer.send(topic=\"sms\", value={\"name\": \"Juan\"}, key=\"csv\", value_type=\"json\")\n    # kf_producer.send(topic=\"sms\", value=\"dog.jpg\", key=\"image\", value_type=\"file\")\n    image = cv2.imread(\"dog.jpg\")\n    frame_height, frame_width, _ = image.shape\n    kf_producer.send(\n        topic=\"image\",",
        "detail": "example.basic.send_image",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.basic.send_json",
        "description": "example.basic.send_json",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.137:9092\")\nwith kafka_instance.producer() as producer:\n    producer.send(\n        topic=\"sms\",\n        value={\"mensaje\": \"Hola Kafka!\"},\n        key=\"clave1\",\n        value_type=\"json\",\n        header={\"response_to\": \"send_to_docker\", \"id_db\": \"abcd_1234\"},\n    )",
        "detail": "example.basic.send_json",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.basic.send_video",
        "description": "example.basic.send_video",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.60:9092\")\nwith kafka_instance.producer() as producer:\n    video_capture = cv2.VideoCapture(f\"../../data/videos/statistics/0007.mp4\")\n    assert video_capture.isOpened(), \"Error reading video file\"\n    # read metadata of video\n    frame_width, frame_height, total_frames, fps = [\n        int(video_capture.get(value))\n        for value in [\n            cv2.CAP_PROP_FRAME_WIDTH,\n            cv2.CAP_PROP_FRAME_HEIGHT,",
        "detail": "example.basic.send_video",
        "documentation": {}
    },
    {
        "label": "process_message",
        "kind": 2,
        "importPath": "example.in_docker.basic",
        "description": "example.in_docker.basic",
        "peekOfCode": "def process_message(data):\n    header = data.header\n    value = data.value\n    value[\"result\"] = \"OK\"\n    print(f\"Message received: {value} - {header}, key: {data.key}\")\n    if \"response_to\" in header:\n        with kf.producer() as producer:\n            producer.send(\n                topic=header[\"response_to\"],\n                value=value,",
        "detail": "example.in_docker.basic",
        "documentation": {}
    },
    {
        "label": "kf",
        "kind": 5,
        "importPath": "example.in_docker.basic",
        "description": "example.in_docker.basic",
        "peekOfCode": "kf = Wkafka(server=\"192.168.1.137:9092\")\nkf = Wkafka(server=\"kafka:19092\")\n@kf.consumer(\n    topic=\"sms\",\n    value_type=\"json\",\n)\ndef process_message(data):\n    header = data.header\n    value = data.value\n    value[\"result\"] = \"OK\"",
        "detail": "example.in_docker.basic",
        "documentation": {}
    },
    {
        "label": "kf",
        "kind": 5,
        "importPath": "example.in_docker.basic",
        "description": "example.in_docker.basic",
        "peekOfCode": "kf = Wkafka(server=\"kafka:19092\")\n@kf.consumer(\n    topic=\"sms\",\n    value_type=\"json\",\n)\ndef process_message(data):\n    header = data.header\n    value = data.value\n    value[\"result\"] = \"OK\"\n    print(f\"Message received: {value} - {header}, key: {data.key}\")",
        "detail": "example.in_docker.basic",
        "documentation": {}
    },
    {
        "label": "Microservice",
        "kind": 6,
        "importPath": "example.in_docker.microservice",
        "description": "example.in_docker.microservice",
        "peekOfCode": "class Microservice:\n    complete_steps = False\n    def __init__(self, config_file: str = \"config.yaml\"):\n        # Read the configuration\n        self.config_file = config_file\n        self._update_config()\n        self.config = leer_yaml(config_file)\n        # Configure attributes\n        self.worker_id_file = self.config.get(\"worker_id_file\", \"worker_id.yaml\")\n        self.kafka_server = self.config.get(\"kafka_server\", \"192.168.1.60:9092\")",
        "detail": "example.in_docker.microservice",
        "documentation": {}
    },
    {
        "label": "Auto_respond",
        "kind": 6,
        "importPath": "example.in_docker.microservice",
        "description": "example.in_docker.microservice",
        "peekOfCode": "class Auto_respond:\n    _results: dict = None\n    _errors: dict = None\n    microservice: Microservice = None\n    config_path: str = None\n    def __init__(self, microservice: Microservice, data: Consumer_data = None) -> None:\n        self.microservice = microservice\n        self.data = data\n    def run(self, args_dict: dict):\n        return self._run(args_dict)",
        "detail": "example.in_docker.microservice",
        "documentation": {}
    },
    {
        "label": "process_message",
        "kind": 2,
        "importPath": "example.in_docker.read_respond",
        "description": "example.in_docker.read_respond",
        "peekOfCode": "def process_message(data: Consumer_data):\n    header = data.header\n    value = data.value\n    print(f\"Mensaje recibido: {value}\")\n# @kafka_instance.consumer(\n#     topic=\"read_respond\",\n#     value_type=\"image\",\n#     key=\"clave1\",\n# )\n# def stream_video(data: Consumer_data):",
        "detail": "example.in_docker.read_respond",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.in_docker.read_respond",
        "description": "example.in_docker.read_respond",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.137:9092\", name=\"read_respond\")\n@kafka_instance.consumer(\n    topic=\"read_respond\",\n    value_type=\"json\",\n    key=\"clave1\",\n)\ndef process_message(data: Consumer_data):\n    header = data.header\n    value = data.value\n    print(f\"Mensaje recibido: {value}\")",
        "detail": "example.in_docker.read_respond",
        "documentation": {}
    },
    {
        "label": "kafka_instance",
        "kind": 5,
        "importPath": "example.in_docker.send_to_docker",
        "description": "example.in_docker.send_to_docker",
        "peekOfCode": "kafka_instance = Wkafka(server=\"192.168.1.137:9092\")\nwith kafka_instance.producer() as producer:\n    producer.send(\n        topic=\"read_respond\",\n        value={\"mensaje\": \"Hola Kafka!\"},\n        key=\"clave1\",\n        value_type=\"json\",\n        header={\"response_to\": \"send_to_docker\", \"id_db\": \"abcd_1234\"},\n    )\n# image = cv2.imread(\"dog.jpg\")",
        "detail": "example.in_docker.send_to_docker",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "kind": 6,
        "importPath": "example.in_docker.wkafka copy",
        "description": "example.in_docker.wkafka copy",
        "peekOfCode": "class Consumer_data:\n    value: bytes = None\n    key: str = None\n    topic: str = None\n    group_id: str = None\n    header: str = None\n    offset: int = None\nclass Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach",
        "detail": "example.in_docker.wkafka copy",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "kind": 6,
        "importPath": "example.in_docker.wkafka copy",
        "description": "example.in_docker.wkafka copy",
        "peekOfCode": "class Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach\n    for easy message processing and sending.\n    \"\"\"\n    type_formats = [\"json\", \"file\", \"image\"]\n    is_producer = False\n    def __init__(self, server: str, name: str = None):\n        \"\"\"\n        Initialize the CustomKafka class with the server address.",
        "detail": "example.in_docker.wkafka copy",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "kind": 6,
        "importPath": "example.in_docker.wkafka",
        "description": "example.in_docker.wkafka",
        "peekOfCode": "class Consumer_data:\n    value: bytes = None\n    key: str = None\n    topic: str = None\n    group_id: str = None\n    header: str = None\n    offset: int = None\nclass Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach",
        "detail": "example.in_docker.wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "kind": 6,
        "importPath": "example.in_docker.wkafka",
        "description": "example.in_docker.wkafka",
        "peekOfCode": "class Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach\n    for easy message processing and sending.\n    \"\"\"\n    type_formats = [\"json\", \"file\", \"image\"]\n    is_producer = False\n    def __init__(\n        self,\n        server: str,",
        "detail": "example.in_docker.wkafka",
        "documentation": {}
    },
    {
        "label": "Consumer_data",
        "kind": 6,
        "importPath": "wkafka.controller.wkafka",
        "description": "wkafka.controller.wkafka",
        "peekOfCode": "class Consumer_data:\n    value: bytes = None\n    key: str = None\n    topic: str = None\n    group_id: str = None\n    header: str = None\n    offset: int = None\nclass Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach",
        "detail": "wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "Wkafka",
        "kind": 6,
        "importPath": "wkafka.controller.wkafka",
        "description": "wkafka.controller.wkafka",
        "peekOfCode": "class Wkafka:\n    \"\"\"\n    A class that manages Kafka producers and consumers with a decorator-based approach\n    for easy message processing and sending.\n    \"\"\"\n    type_formats = [\"json\", \"file\", \"image\"]\n    is_producer = False\n    def __init__(\n        self,\n        server: str | list,",
        "detail": "wkafka.controller.wkafka",
        "documentation": {}
    },
    {
        "label": "actual_version",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "actual_version = config_project[\"project\"][\"version\"]\n# incrementar la version\nnew_version = version = actual_version.split(\".\")\n# hay 3 partes en la version: major, minor, patch\n# cada parte se incrementa en 1, cuando la parte anterior llega a 9, se incrementa la siguiente parte en 1\n# si la parte anterior es 0, se incrementa en 1\n# major = int(version[0])\n# minor = int(version[1])\n# patch = int(version[2])\n# if patch < 9:",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "new_version",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "new_version = version = actual_version.split(\".\")\n# hay 3 partes en la version: major, minor, patch\n# cada parte se incrementa en 1, cuando la parte anterior llega a 9, se incrementa la siguiente parte en 1\n# si la parte anterior es 0, se incrementa en 1\n# major = int(version[0])\n# minor = int(version[1])\n# patch = int(version[2])\n# if patch < 9:\n#     patch += 1\n# else:",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git add .\"\nsubprocess.run(command, shell=True)\ncommand = f\"git commit -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)\ncommand = f\"git tag -a {new_version} -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin {new_version}\"\nsubprocess.run(command, shell=True)",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git commit -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)\ncommand = f\"git tag -a {new_version} -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin {new_version}\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git push origin main\"\nsubprocess.run(command, shell=True)\ncommand = f\"git tag -a {new_version} -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin {new_version}\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)\nprint(\"Proceso finalizado\")",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git tag -a {new_version} -m 'publish version {new_version}'\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin {new_version}\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)\nprint(\"Proceso finalizado\")",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git push origin {new_version}\"\nsubprocess.run(command, shell=True)\ncommand = f\"git push origin main\"\nsubprocess.run(command, shell=True)\nprint(\"Proceso finalizado\")",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "publish_version",
        "description": "publish_version",
        "peekOfCode": "command = f\"git push origin main\"\nsubprocess.run(command, shell=True)\nprint(\"Proceso finalizado\")",
        "detail": "publish_version",
        "documentation": {}
    },
    {
        "label": "this_directory",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "this_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\nsetup(\n    name=config_project[\"project\"][\"name\"],  # Nombre del paquete en PyPI\n    version=config_project[\"project\"][\"version\"],\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "long_description",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "long_description = (this_directory / \"README.md\").read_text()\nsetup(\n    name=config_project[\"project\"][\"name\"],  # Nombre del paquete en PyPI\n    version=config_project[\"project\"][\"version\"],\n    packages=find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Build Tools\",",
        "detail": "setup",
        "documentation": {}
    }
]